{"version":3,"file":"static/js/144.794528ab.chunk.js","mappings":"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","sources":["components/MovieAPI/FetchMovie.js","components/MovieList/MovieList.jsx","components/MovieList/MovieList.styled.jsx","components/MovieList/SearchMovie.styled.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst KEY = 'fc655b0a98b1257d55ec04cdf6dbef33';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMoviesQuery = async query => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${KEY}&query=${query}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieById = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const getMovieReviews = async id => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n","import React, { Suspense } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport {\n  MovieListEl,\n  MoviesTitle,\n  MovieItem,\n  InfoLink,\n  MovieImg,\n} from './MovieList.styled';\n\nexport const MovieList = ({ movieList }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <MovieListEl>\n        {movieList.map(({ id, poster_path, title }) => (\n          <MovieItem key={id}>\n            <InfoLink to={`/movies/${id}`} state={{ from: location }}>\n              <MovieImg\n                src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n                alt={title}\n              />\n              <MoviesTitle>{title}</MoviesTitle>\n            </InfoLink>\n          </MovieItem>\n        ))}\n      </MovieListEl>\n      <Suspense fallback={<h1>Loading...</h1>}></Suspense>\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const Title = styled.h1`\n  padding: 20px;\n  margin: 0;\n  font-weight: 500;\n  font-size: 30px;\n  line-height: 1.2;\n  color: black;\n  text-align: center;\n`;\n\nexport const MovieListEl = styled.ul`\n  display: flex;\n  list-style: none;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 25px;\n  padding: 0;\n`;\n\nexport const MovieItem = styled.li`\n  width: 370px;\n`;\nexport const MoviesTitle = styled.h2`\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 1.2;\n  color: black;\n  text-align: center;\n`;\n\nexport const MovieImg = styled.img`\n  display: block;\n  width: calc(100%);\n`;\n\nexport const InfoLink = styled(NavLink)`\n  text-decoration: none;\n`;\n","import styled from 'styled-components';\n\nexport const SearchForm = styled.form`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\n`;\n\nexport const SearchLabel = styled.label`\n  display: block;\n  padding: 20px;\n  font-weight: 500;\n  font-size: 30px;\n  line-height: 1.2;\n  color: black;\n  text-align: center;\n`;\n\nexport const SearchInput = styled.input`\nwidth: 300px;\npadding: 15px;\nborder-radius: 4px;\nmargin-bottom: 20px;\n\n\n`;\n\nexport const SearchButton = styled.button`\nfont-weight: 400;\n  font-size: 20px;\n  line-height: 1.2;\n  color: black;\n  display: block;\n  text-decoration: none;\n  margin: 15px 0 15px 0;\n  border-radius: 4px;\n  width: 150px;\n  padding: 10px 32px 10px 32px;\n  background-color: rgb(240, 218, 97);\n  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.12), 0px 1px 1px rgba(0, 0, 0, 0.14),\n    0px 2px 1px rgba(0, 0, 0, 0.2);`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMoviesQuery } from 'components/MovieAPI/FetchMovie';\nimport { MovieList } from 'components/MovieList/MovieList';\nimport {\n  SearchForm,\n  SearchLabel,\n  SearchInput,\n  SearchButton,\n} from 'components/MovieList/SearchMovie.styled';\n\nimport Notiflix from 'notiflix';\n\nexport default function Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchMovies, setSearchMovies] = useState([]);\n  const [movieQuery, setMovieQuery] = useState('');\n\n  const movieName = searchParams.get('query') ?? '';\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (movieQuery === movieName) {\n      return Notiflix.Notify.failure('Enter movie name. Please!');\n    }\n    setSearchParams(movieQuery !== '' ? { query: movieQuery } : {});\n  };\n\n  useEffect(() => {\n    if (movieName === '') {\n      return;\n    }\n    async function getMovieByQuery() {\n      const searchMovies = await getMoviesQuery(movieName);\n      setSearchMovies(searchMovies.results);\n    }\n    getMovieByQuery();\n    setMovieQuery(movieName);\n  }, [movieName]);\n\n  return (\n    <>\n      <SearchLabel>Search Movies</SearchLabel>\n      <SearchForm onSubmit={handleSubmit}>\n        <SearchInput\n          type=\"text\"\n          value={movieQuery}\n          onChange={e => setMovieQuery(e.target.value)}\n          autoFocus\n          placeholder=\"Search movie\"\n        />\n        <SearchButton type=\"submit\">Search</SearchButton>\n      </SearchForm>\n      <MovieList movieList={searchMovies} />\n    </>\n  );\n}\n"],"names":["KEY","BASE_URL","getTrendingMovies","axios","response","data","getMoviesQuery","query","getMovieById","id","getMovieCast","cast","getMovieReviews","results","MovieList","movieList","location","useLocation","map","poster_path","title","to","state","from","src","alt","Suspense","fallback","Title","styled","MovieListEl","MovieItem","MoviesTitle","MovieImg","InfoLink","NavLink","SearchForm","SearchLabel","SearchInput","SearchButton","Movies","useSearchParams","searchParams","setSearchParams","useState","searchMovies","setSearchMovies","movieQuery","setMovieQuery","movieName","get","useEffect","getMovieByQuery","onSubmit","e","preventDefault","Notiflix","type","value","onChange","target","autoFocus","placeholder"],"sourceRoot":""}